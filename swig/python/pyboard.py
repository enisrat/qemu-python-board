# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _pyboard
else:
    import _pyboard

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def MachineClass_init_set(_self, cb):
    return _pyboard.MachineClass_init_set(_self, cb)
TYPE_OBJECT = _pyboard.TYPE_OBJECT
class ObjectProperty(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    name = property(_pyboard.ObjectProperty_name_get, _pyboard.ObjectProperty_name_set)
    type = property(_pyboard.ObjectProperty_type_get, _pyboard.ObjectProperty_type_set)
    description = property(_pyboard.ObjectProperty_description_get, _pyboard.ObjectProperty_description_set)
    get = property(_pyboard.ObjectProperty_get_get, _pyboard.ObjectProperty_get_set)
    set = property(_pyboard.ObjectProperty_set_get, _pyboard.ObjectProperty_set_set)
    resolve = property(_pyboard.ObjectProperty_resolve_get, _pyboard.ObjectProperty_resolve_set)
    release = property(_pyboard.ObjectProperty_release_get, _pyboard.ObjectProperty_release_set)
    init = property(_pyboard.ObjectProperty_init_get, _pyboard.ObjectProperty_init_set)
    opaque = property(_pyboard.ObjectProperty_opaque_get, _pyboard.ObjectProperty_opaque_set)
    defval = property(_pyboard.ObjectProperty_defval_get, _pyboard.ObjectProperty_defval_set)

    def __init__(self):
        _pyboard.ObjectProperty_swiginit(self, _pyboard.new_ObjectProperty())
    __swig_destroy__ = _pyboard.delete_ObjectProperty

# Register ObjectProperty in _pyboard:
_pyboard.ObjectProperty_swigregister(ObjectProperty)
OBJECT_CLASS_CAST_CACHE = _pyboard.OBJECT_CLASS_CAST_CACHE
class ObjectClass(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    type = property(_pyboard.ObjectClass_type_get, _pyboard.ObjectClass_type_set)
    interfaces = property(_pyboard.ObjectClass_interfaces_get, _pyboard.ObjectClass_interfaces_set)
    object_cast_cache = property(_pyboard.ObjectClass_object_cast_cache_get, _pyboard.ObjectClass_object_cast_cache_set)
    class_cast_cache = property(_pyboard.ObjectClass_class_cast_cache_get, _pyboard.ObjectClass_class_cast_cache_set)
    unparent = property(_pyboard.ObjectClass_unparent_get, _pyboard.ObjectClass_unparent_set)
    properties = property(_pyboard.ObjectClass_properties_get, _pyboard.ObjectClass_properties_set)

    def __init__(self):
        _pyboard.ObjectClass_swiginit(self, _pyboard.new_ObjectClass())
    __swig_destroy__ = _pyboard.delete_ObjectClass

# Register ObjectClass in _pyboard:
_pyboard.ObjectClass_swigregister(ObjectClass)
class Object(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _class = property(_pyboard.Object__class_get, _pyboard.Object__class_set)
    free = property(_pyboard.Object_free_get, _pyboard.Object_free_set)
    properties = property(_pyboard.Object_properties_get, _pyboard.Object_properties_set)
    ref = property(_pyboard.Object_ref_get, _pyboard.Object_ref_set)
    parent = property(_pyboard.Object_parent_get, _pyboard.Object_parent_set)

    def __init__(self):
        _pyboard.Object_swiginit(self, _pyboard.new_Object())
    __swig_destroy__ = _pyboard.delete_Object

# Register Object in _pyboard:
_pyboard.Object_swigregister(Object)
class TypeInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    name = property(_pyboard.TypeInfo_name_get, _pyboard.TypeInfo_name_set)
    parent = property(_pyboard.TypeInfo_parent_get, _pyboard.TypeInfo_parent_set)
    instance_size = property(_pyboard.TypeInfo_instance_size_get, _pyboard.TypeInfo_instance_size_set)
    instance_align = property(_pyboard.TypeInfo_instance_align_get, _pyboard.TypeInfo_instance_align_set)
    instance_init = property(_pyboard.TypeInfo_instance_init_get, _pyboard.TypeInfo_instance_init_set)
    instance_post_init = property(_pyboard.TypeInfo_instance_post_init_get, _pyboard.TypeInfo_instance_post_init_set)
    instance_finalize = property(_pyboard.TypeInfo_instance_finalize_get, _pyboard.TypeInfo_instance_finalize_set)
    abstract = property(_pyboard.TypeInfo_abstract_get, _pyboard.TypeInfo_abstract_set)
    class_size = property(_pyboard.TypeInfo_class_size_get, _pyboard.TypeInfo_class_size_set)
    class_init = property(_pyboard.TypeInfo_class_init_get, _pyboard.TypeInfo_class_init_set)
    class_base_init = property(_pyboard.TypeInfo_class_base_init_get, _pyboard.TypeInfo_class_base_init_set)
    class_data = property(_pyboard.TypeInfo_class_data_get, _pyboard.TypeInfo_class_data_set)
    interfaces = property(_pyboard.TypeInfo_interfaces_get, _pyboard.TypeInfo_interfaces_set)

    def __init__(self):
        _pyboard.TypeInfo_swiginit(self, _pyboard.new_TypeInfo())
    __swig_destroy__ = _pyboard.delete_TypeInfo

# Register TypeInfo in _pyboard:
_pyboard.TypeInfo_swigregister(TypeInfo)
class InterfaceInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    type = property(_pyboard.InterfaceInfo_type_get, _pyboard.InterfaceInfo_type_set)

    def __init__(self):
        _pyboard.InterfaceInfo_swiginit(self, _pyboard.new_InterfaceInfo())
    __swig_destroy__ = _pyboard.delete_InterfaceInfo

# Register InterfaceInfo in _pyboard:
_pyboard.InterfaceInfo_swigregister(InterfaceInfo)
class InterfaceClass(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    parent_class = property(_pyboard.InterfaceClass_parent_class_get, _pyboard.InterfaceClass_parent_class_set)
    concrete_class = property(_pyboard.InterfaceClass_concrete_class_get, _pyboard.InterfaceClass_concrete_class_set)
    interface_type = property(_pyboard.InterfaceClass_interface_type_get, _pyboard.InterfaceClass_interface_type_set)

    def __init__(self):
        _pyboard.InterfaceClass_swiginit(self, _pyboard.new_InterfaceClass())
    __swig_destroy__ = _pyboard.delete_InterfaceClass

# Register InterfaceClass in _pyboard:
_pyboard.InterfaceClass_swigregister(InterfaceClass)
TYPE_INTERFACE = _pyboard.TYPE_INTERFACE

def object_new_with_class(klass):
    return _pyboard.object_new_with_class(klass)

def object_new(typename):
    return _pyboard.object_new(typename)

def object_new_with_props(*args):
    return _pyboard.object_new_with_props(*args)

def object_apply_global_props(obj, props, errp):
    return _pyboard.object_apply_global_props(obj, props, errp)

def object_set_machine_compat_props(compat_props):
    return _pyboard.object_set_machine_compat_props(compat_props)

def object_set_accelerator_compat_props(compat_props):
    return _pyboard.object_set_accelerator_compat_props(compat_props)

def object_register_sugar_prop(driver, prop, value, optional):
    return _pyboard.object_register_sugar_prop(driver, prop, value, optional)

def object_apply_compat_props(obj):
    return _pyboard.object_apply_compat_props(obj)

def object_set_props(*args):
    return _pyboard.object_set_props(*args)

def object_initialize(obj, size, typename):
    return _pyboard.object_initialize(obj, size, typename)

def object_initialize_child_with_props(*args):
    return _pyboard.object_initialize_child_with_props(*args)

def object_initialize_child_internal(parent, propname, child, size, type):
    return _pyboard.object_initialize_child_internal(parent, propname, child, size, type)

def object_dynamic_cast(obj, typename):
    return _pyboard.object_dynamic_cast(obj, typename)

def object_dynamic_cast_assert(obj, typename, file, line, func):
    return _pyboard.object_dynamic_cast_assert(obj, typename, file, line, func)

def object_get_class(obj):
    return _pyboard.object_get_class(obj)

def object_get_typename(obj):
    return _pyboard.object_get_typename(obj)

def type_register_static(info):
    return _pyboard.type_register_static(info)

def type_register(info):
    return _pyboard.type_register(info)

def type_register_static_array(infos, nr_infos):
    return _pyboard.type_register_static_array(infos, nr_infos)

def type_print_class_properties(type):
    return _pyboard.type_print_class_properties(type)

def object_set_properties_from_keyval(obj, qdict, from_json, errp):
    return _pyboard.object_set_properties_from_keyval(obj, qdict, from_json, errp)

def object_class_dynamic_cast_assert(klass, typename, file, line, func):
    return _pyboard.object_class_dynamic_cast_assert(klass, typename, file, line, func)

def object_class_dynamic_cast(klass, typename):
    return _pyboard.object_class_dynamic_cast(klass, typename)

def object_class_get_parent(klass):
    return _pyboard.object_class_get_parent(klass)

def object_class_get_name(klass):
    return _pyboard.object_class_get_name(klass)

def object_class_is_abstract(klass):
    return _pyboard.object_class_is_abstract(klass)

def object_class_by_name(typename):
    return _pyboard.object_class_by_name(typename)

def module_object_class_by_name(typename):
    return _pyboard.module_object_class_by_name(typename)

def object_class_foreach(fn, implements_type, include_abstract, opaque):
    return _pyboard.object_class_foreach(fn, implements_type, include_abstract, opaque)

def object_class_get_list(implements_type, include_abstract):
    return _pyboard.object_class_get_list(implements_type, include_abstract)

def object_class_get_list_sorted(implements_type, include_abstract):
    return _pyboard.object_class_get_list_sorted(implements_type, include_abstract)

def object_ref(obj):
    return _pyboard.object_ref(obj)

def object_unref(obj):
    return _pyboard.object_unref(obj)

def object_property_try_add(obj, name, type, get, set, release, opaque, errp):
    return _pyboard.object_property_try_add(obj, name, type, get, set, release, opaque, errp)

def object_property_add(obj, name, type, get, set, release, opaque):
    return _pyboard.object_property_add(obj, name, type, get, set, release, opaque)

def object_property_del(obj, name):
    return _pyboard.object_property_del(obj, name)

def object_class_property_add(klass, name, type, get, set, release, opaque):
    return _pyboard.object_class_property_add(klass, name, type, get, set, release, opaque)

def object_property_set_default_bool(prop, value):
    return _pyboard.object_property_set_default_bool(prop, value)

def object_property_set_default_str(prop, value):
    return _pyboard.object_property_set_default_str(prop, value)

def object_property_set_default_list(prop):
    return _pyboard.object_property_set_default_list(prop)

def object_property_set_default_int(prop, value):
    return _pyboard.object_property_set_default_int(prop, value)

def object_property_set_default_uint(prop, value):
    return _pyboard.object_property_set_default_uint(prop, value)

def object_property_find(obj, name):
    return _pyboard.object_property_find(obj, name)

def object_property_find_err(obj, name, errp):
    return _pyboard.object_property_find_err(obj, name, errp)

def object_class_property_find(klass, name):
    return _pyboard.object_class_property_find(klass, name)

def object_class_property_find_err(klass, name, errp):
    return _pyboard.object_class_property_find_err(klass, name, errp)
class ObjectPropertyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    nextclass = property(_pyboard.ObjectPropertyIterator_nextclass_get, _pyboard.ObjectPropertyIterator_nextclass_set)
    iter = property(_pyboard.ObjectPropertyIterator_iter_get, _pyboard.ObjectPropertyIterator_iter_set)

    def __init__(self):
        _pyboard.ObjectPropertyIterator_swiginit(self, _pyboard.new_ObjectPropertyIterator())
    __swig_destroy__ = _pyboard.delete_ObjectPropertyIterator

# Register ObjectPropertyIterator in _pyboard:
_pyboard.ObjectPropertyIterator_swigregister(ObjectPropertyIterator)

def object_property_iter_init(iter, obj):
    return _pyboard.object_property_iter_init(iter, obj)

def object_class_property_iter_init(iter, klass):
    return _pyboard.object_class_property_iter_init(iter, klass)

def object_property_iter_next(iter):
    return _pyboard.object_property_iter_next(iter)

def object_unparent(obj):
    return _pyboard.object_unparent(obj)

def object_property_get(obj, name, v, errp):
    return _pyboard.object_property_get(obj, name, v, errp)

def object_property_set_str(obj, name, value, errp):
    return _pyboard.object_property_set_str(obj, name, value, errp)

def object_property_get_str(obj, name, errp):
    return _pyboard.object_property_get_str(obj, name, errp)

def object_property_set_link(obj, name, value, errp):
    return _pyboard.object_property_set_link(obj, name, value, errp)

def object_property_get_link(obj, name, errp):
    return _pyboard.object_property_get_link(obj, name, errp)

def object_property_set_bool(obj, name, value, errp):
    return _pyboard.object_property_set_bool(obj, name, value, errp)

def object_property_get_bool(obj, name, errp):
    return _pyboard.object_property_get_bool(obj, name, errp)

def object_property_set_int(obj, name, value, errp):
    return _pyboard.object_property_set_int(obj, name, value, errp)

def object_property_get_int(obj, name, errp):
    return _pyboard.object_property_get_int(obj, name, errp)

def object_property_set_uint(obj, name, value, errp):
    return _pyboard.object_property_set_uint(obj, name, value, errp)

def object_property_get_uint(obj, name, errp):
    return _pyboard.object_property_get_uint(obj, name, errp)

def object_property_get_enum(obj, name, typename, errp):
    return _pyboard.object_property_get_enum(obj, name, typename, errp)

def object_property_set(obj, name, v, errp):
    return _pyboard.object_property_set(obj, name, v, errp)

def object_property_parse(obj, name, string, errp):
    return _pyboard.object_property_parse(obj, name, string, errp)

def object_property_print(obj, name, human, errp):
    return _pyboard.object_property_print(obj, name, human, errp)

def object_property_get_type(obj, name, errp):
    return _pyboard.object_property_get_type(obj, name, errp)

def object_get_root():
    return _pyboard.object_get_root()

def object_get_objects_root():
    return _pyboard.object_get_objects_root()

def object_get_internal_root():
    return _pyboard.object_get_internal_root()

def object_get_canonical_path_component(obj):
    return _pyboard.object_get_canonical_path_component(obj)

def object_get_canonical_path(obj):
    return _pyboard.object_get_canonical_path(obj)

def object_resolve_path(path, ambiguous):
    return _pyboard.object_resolve_path(path, ambiguous)

def object_resolve_path_type(path, typename, ambiguous):
    return _pyboard.object_resolve_path_type(path, typename, ambiguous)

def object_resolve_path_at(parent, path):
    return _pyboard.object_resolve_path_at(parent, path)

def object_resolve_path_component(parent, part):
    return _pyboard.object_resolve_path_component(parent, part)

def object_property_try_add_child(obj, name, child, errp):
    return _pyboard.object_property_try_add_child(obj, name, child, errp)

def object_property_add_child(obj, name, child):
    return _pyboard.object_property_add_child(obj, name, child)
OBJ_PROP_LINK_STRONG = _pyboard.OBJ_PROP_LINK_STRONG
OBJ_PROP_LINK_DIRECT = _pyboard.OBJ_PROP_LINK_DIRECT
OBJ_PROP_LINK_CLASS = _pyboard.OBJ_PROP_LINK_CLASS

def object_property_allow_set_link(obj, name, child, errp):
    return _pyboard.object_property_allow_set_link(obj, name, child, errp)

def object_property_add_link(obj, name, type, targetp, check, flags):
    return _pyboard.object_property_add_link(obj, name, type, targetp, check, flags)

def object_class_property_add_link(oc, name, type, offset, check, flags):
    return _pyboard.object_class_property_add_link(oc, name, type, offset, check, flags)

def object_property_add_str(obj, name, get, set):
    return _pyboard.object_property_add_str(obj, name, get, set)

def object_class_property_add_str(klass, name, get, set):
    return _pyboard.object_class_property_add_str(klass, name, get, set)

def object_property_add_bool(obj, name, get, set):
    return _pyboard.object_property_add_bool(obj, name, get, set)

def object_class_property_add_bool(klass, name, get, set):
    return _pyboard.object_class_property_add_bool(klass, name, get, set)

def object_property_add_enum(obj, name, typename, lookup, get, set):
    return _pyboard.object_property_add_enum(obj, name, typename, lookup, get, set)

def object_class_property_add_enum(klass, name, typename, lookup, get, set):
    return _pyboard.object_class_property_add_enum(klass, name, typename, lookup, get, set)

def object_property_add_tm(obj, name, get):
    return _pyboard.object_property_add_tm(obj, name, get)

def object_class_property_add_tm(klass, name, get):
    return _pyboard.object_class_property_add_tm(klass, name, get)
OBJ_PROP_FLAG_READ = _pyboard.OBJ_PROP_FLAG_READ
OBJ_PROP_FLAG_WRITE = _pyboard.OBJ_PROP_FLAG_WRITE
OBJ_PROP_FLAG_READWRITE = _pyboard.OBJ_PROP_FLAG_READWRITE

def object_property_add_uint8_ptr(obj, name, v, flags):
    return _pyboard.object_property_add_uint8_ptr(obj, name, v, flags)

def object_class_property_add_uint8_ptr(klass, name, v, flags):
    return _pyboard.object_class_property_add_uint8_ptr(klass, name, v, flags)

def object_property_add_uint16_ptr(obj, name, v, flags):
    return _pyboard.object_property_add_uint16_ptr(obj, name, v, flags)

def object_class_property_add_uint16_ptr(klass, name, v, flags):
    return _pyboard.object_class_property_add_uint16_ptr(klass, name, v, flags)

def object_property_add_uint32_ptr(obj, name, v, flags):
    return _pyboard.object_property_add_uint32_ptr(obj, name, v, flags)

def object_class_property_add_uint32_ptr(klass, name, v, flags):
    return _pyboard.object_class_property_add_uint32_ptr(klass, name, v, flags)

def object_property_add_uint64_ptr(obj, name, v, flags):
    return _pyboard.object_property_add_uint64_ptr(obj, name, v, flags)

def object_class_property_add_uint64_ptr(klass, name, v, flags):
    return _pyboard.object_class_property_add_uint64_ptr(klass, name, v, flags)

def object_property_add_alias(obj, name, target_obj, target_name):
    return _pyboard.object_property_add_alias(obj, name, target_obj, target_name)

def object_property_add_const_link(obj, name, target):
    return _pyboard.object_property_add_const_link(obj, name, target)

def object_property_set_description(obj, name, description):
    return _pyboard.object_property_set_description(obj, name, description)

def object_class_property_set_description(klass, name, description):
    return _pyboard.object_class_property_set_description(klass, name, description)

def object_child_foreach(obj, fn, opaque):
    return _pyboard.object_child_foreach(obj, fn, opaque)

def object_child_foreach_recursive(obj, fn, opaque):
    return _pyboard.object_child_foreach_recursive(obj, fn, opaque)

def container_get(root, path):
    return _pyboard.container_get(root, path)

def object_type_get_instance_size(typename):
    return _pyboard.object_type_get_instance_size(typename)

def object_property_help(name, type, defval, description):
    return _pyboard.object_property_help(name, type, defval, description)
EXCP_INTERRUPT = _pyboard.EXCP_INTERRUPT
EXCP_HLT = _pyboard.EXCP_HLT
EXCP_DEBUG = _pyboard.EXCP_DEBUG
EXCP_HALTED = _pyboard.EXCP_HALTED
EXCP_YIELD = _pyboard.EXCP_YIELD
EXCP_ATOMIC = _pyboard.EXCP_ATOMIC

def cpu_exec_init_all():
    return _pyboard.cpu_exec_init_all()

def cpu_exec_step_atomic(cpu):
    return _pyboard.cpu_exec_step_atomic(cpu)

def qemu_init_cpu_list():
    return _pyboard.qemu_init_cpu_list()

def cpu_list_lock():
    return _pyboard.cpu_list_lock()

def cpu_list_unlock():
    return _pyboard.cpu_list_unlock()

def cpu_list_generation_id_get():
    return _pyboard.cpu_list_generation_id_get()

def tcg_iommu_init_notifier_list(cpu):
    return _pyboard.tcg_iommu_init_notifier_list(cpu)

def tcg_iommu_free_notifier_list(cpu):
    return _pyboard.tcg_iommu_free_notifier_list(cpu)
DEVICE_NATIVE_ENDIAN = _pyboard.DEVICE_NATIVE_ENDIAN
DEVICE_BIG_ENDIAN = _pyboard.DEVICE_BIG_ENDIAN
DEVICE_LITTLE_ENDIAN = _pyboard.DEVICE_LITTLE_ENDIAN

def qemu_ram_remap(addr, length):
    return _pyboard.qemu_ram_remap(addr, length)

def qemu_ram_addr_from_host(ptr):
    return _pyboard.qemu_ram_addr_from_host(ptr)

def qemu_ram_addr_from_host_nofail(ptr):
    return _pyboard.qemu_ram_addr_from_host_nofail(ptr)

def qemu_ram_block_by_name(name):
    return _pyboard.qemu_ram_block_by_name(name)

def qemu_ram_block_from_host(ptr, round_offset, offset):
    return _pyboard.qemu_ram_block_from_host(ptr, round_offset, offset)

def qemu_ram_block_host_offset(rb, host):
    return _pyboard.qemu_ram_block_host_offset(rb, host)

def qemu_ram_set_idstr(block, name, dev):
    return _pyboard.qemu_ram_set_idstr(block, name, dev)

def qemu_ram_unset_idstr(block):
    return _pyboard.qemu_ram_unset_idstr(block)

def qemu_ram_get_idstr(rb):
    return _pyboard.qemu_ram_get_idstr(rb)

def qemu_ram_get_host_addr(rb):
    return _pyboard.qemu_ram_get_host_addr(rb)

def qemu_ram_get_offset(rb):
    return _pyboard.qemu_ram_get_offset(rb)

def qemu_ram_get_used_length(rb):
    return _pyboard.qemu_ram_get_used_length(rb)

def qemu_ram_get_max_length(rb):
    return _pyboard.qemu_ram_get_max_length(rb)

def qemu_ram_is_shared(rb):
    return _pyboard.qemu_ram_is_shared(rb)

def qemu_ram_is_noreserve(rb):
    return _pyboard.qemu_ram_is_noreserve(rb)

def qemu_ram_is_uf_zeroable(rb):
    return _pyboard.qemu_ram_is_uf_zeroable(rb)

def qemu_ram_set_uf_zeroable(rb):
    return _pyboard.qemu_ram_set_uf_zeroable(rb)

def qemu_ram_is_migratable(rb):
    return _pyboard.qemu_ram_is_migratable(rb)

def qemu_ram_set_migratable(rb):
    return _pyboard.qemu_ram_set_migratable(rb)

def qemu_ram_unset_migratable(rb):
    return _pyboard.qemu_ram_unset_migratable(rb)

def qemu_ram_is_named_file(rb):
    return _pyboard.qemu_ram_is_named_file(rb)

def qemu_ram_get_fd(rb):
    return _pyboard.qemu_ram_get_fd(rb)

def qemu_ram_pagesize(block):
    return _pyboard.qemu_ram_pagesize(block)

def qemu_ram_pagesize_largest():
    return _pyboard.qemu_ram_pagesize_largest()

def cpu_address_space_init(cpu, asidx, prefix, mr):
    return _pyboard.cpu_address_space_init(cpu, asidx, prefix, mr)

def cpu_physical_memory_rw(addr, buf, len, is_write):
    return _pyboard.cpu_physical_memory_rw(addr, buf, len, is_write)

def cpu_physical_memory_read(addr, buf, len):
    return _pyboard.cpu_physical_memory_read(addr, buf, len)

def cpu_physical_memory_write(addr, buf, len):
    return _pyboard.cpu_physical_memory_write(addr, buf, len)

def cpu_physical_memory_map(addr, plen, is_write):
    return _pyboard.cpu_physical_memory_map(addr, plen, is_write)

def cpu_physical_memory_unmap(buffer, len, is_write, access_len):
    return _pyboard.cpu_physical_memory_unmap(buffer, len, is_write, access_len)

def cpu_register_map_client(bh):
    return _pyboard.cpu_register_map_client(bh)

def cpu_unregister_map_client(bh):
    return _pyboard.cpu_unregister_map_client(bh)

def cpu_physical_memory_is_io(phys_addr):
    return _pyboard.cpu_physical_memory_is_io(phys_addr)

def qemu_flush_coalesced_mmio_buffer():
    return _pyboard.qemu_flush_coalesced_mmio_buffer()

def cpu_flush_icache_range(start, len):
    return _pyboard.cpu_flush_icache_range(start, len)

def qemu_ram_foreach_block(func, opaque):
    return _pyboard.qemu_ram_foreach_block(func, opaque)

def ram_block_discard_range(rb, start, length):
    return _pyboard.ram_block_discard_range(rb, start, length)

def cpu_memory_rw_debug(cpu, addr, ptr, len, is_write):
    return _pyboard.cpu_memory_rw_debug(cpu, addr, ptr, len, is_write)

def list_cpus():
    return _pyboard.list_cpus()

def cpu_loop_exit(cpu):
    return _pyboard.cpu_loop_exit(cpu)

def cpu_loop_exit_restore(cpu, pc):
    return _pyboard.cpu_loop_exit_restore(cpu, pc)
HWADDR_BITS = _pyboard.HWADDR_BITS
class MemMapEntry(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    base = property(_pyboard.MemMapEntry_base_get, _pyboard.MemMapEntry_base_set)
    size = property(_pyboard.MemMapEntry_size_get, _pyboard.MemMapEntry_size_set)

    def __init__(self):
        _pyboard.MemMapEntry_swiginit(self, _pyboard.new_MemMapEntry())
    __swig_destroy__ = _pyboard.delete_MemMapEntry

# Register MemMapEntry in _pyboard:
_pyboard.MemMapEntry_swigregister(MemMapEntry)
cvar = _pyboard.cvar

class MemTxAttrs(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    unspecified = property(_pyboard.MemTxAttrs_unspecified_get, _pyboard.MemTxAttrs_unspecified_set)
    secure = property(_pyboard.MemTxAttrs_secure_get, _pyboard.MemTxAttrs_secure_set)
    space = property(_pyboard.MemTxAttrs_space_get, _pyboard.MemTxAttrs_space_set)
    user = property(_pyboard.MemTxAttrs_user_get, _pyboard.MemTxAttrs_user_set)
    memory = property(_pyboard.MemTxAttrs_memory_get, _pyboard.MemTxAttrs_memory_set)
    requester_id = property(_pyboard.MemTxAttrs_requester_id_get, _pyboard.MemTxAttrs_requester_id_set)
    byte_swap = property(_pyboard.MemTxAttrs_byte_swap_get, _pyboard.MemTxAttrs_byte_swap_set)
    target_tlb_bit0 = property(_pyboard.MemTxAttrs_target_tlb_bit0_get, _pyboard.MemTxAttrs_target_tlb_bit0_set)
    target_tlb_bit1 = property(_pyboard.MemTxAttrs_target_tlb_bit1_get, _pyboard.MemTxAttrs_target_tlb_bit1_set)
    target_tlb_bit2 = property(_pyboard.MemTxAttrs_target_tlb_bit2_get, _pyboard.MemTxAttrs_target_tlb_bit2_set)

    def __init__(self):
        _pyboard.MemTxAttrs_swiginit(self, _pyboard.new_MemTxAttrs())
    __swig_destroy__ = _pyboard.delete_MemTxAttrs

# Register MemTxAttrs in _pyboard:
_pyboard.MemTxAttrs_swigregister(MemTxAttrs)
MEMTX_OK = _pyboard.MEMTX_OK
MEMTX_ERROR = _pyboard.MEMTX_ERROR
MEMTX_DECODE_ERROR = _pyboard.MEMTX_DECODE_ERROR
MEMTX_ACCESS_ERROR = _pyboard.MEMTX_ACCESS_ERROR
MO_8 = _pyboard.MO_8
MO_16 = _pyboard.MO_16
MO_32 = _pyboard.MO_32
MO_64 = _pyboard.MO_64
MO_128 = _pyboard.MO_128
MO_256 = _pyboard.MO_256
MO_512 = _pyboard.MO_512
MO_1024 = _pyboard.MO_1024
MO_SIZE = _pyboard.MO_SIZE
MO_SIGN = _pyboard.MO_SIGN
MO_BSWAP = _pyboard.MO_BSWAP
MO_LE = _pyboard.MO_LE
MO_BE = _pyboard.MO_BE
MO_ASHIFT = _pyboard.MO_ASHIFT
MO_AMASK = _pyboard.MO_AMASK
MO_UNALN = _pyboard.MO_UNALN
MO_ALIGN_2 = _pyboard.MO_ALIGN_2
MO_ALIGN_4 = _pyboard.MO_ALIGN_4
MO_ALIGN_8 = _pyboard.MO_ALIGN_8
MO_ALIGN_16 = _pyboard.MO_ALIGN_16
MO_ALIGN_32 = _pyboard.MO_ALIGN_32
MO_ALIGN_64 = _pyboard.MO_ALIGN_64
MO_ALIGN = _pyboard.MO_ALIGN
MO_ATOM_SHIFT = _pyboard.MO_ATOM_SHIFT
MO_ATOM_IFALIGN = _pyboard.MO_ATOM_IFALIGN
MO_ATOM_IFALIGN_PAIR = _pyboard.MO_ATOM_IFALIGN_PAIR
MO_ATOM_WITHIN16 = _pyboard.MO_ATOM_WITHIN16
MO_ATOM_WITHIN16_PAIR = _pyboard.MO_ATOM_WITHIN16_PAIR
MO_ATOM_SUBALIGN = _pyboard.MO_ATOM_SUBALIGN
MO_ATOM_NONE = _pyboard.MO_ATOM_NONE
MO_ATOM_MASK = _pyboard.MO_ATOM_MASK
MO_UB = _pyboard.MO_UB
MO_UW = _pyboard.MO_UW
MO_UL = _pyboard.MO_UL
MO_UQ = _pyboard.MO_UQ
MO_UO = _pyboard.MO_UO
MO_SB = _pyboard.MO_SB
MO_SW = _pyboard.MO_SW
MO_SL = _pyboard.MO_SL
MO_SQ = _pyboard.MO_SQ
MO_SO = _pyboard.MO_SO
MO_LEUW = _pyboard.MO_LEUW
MO_LEUL = _pyboard.MO_LEUL
MO_LEUQ = _pyboard.MO_LEUQ
MO_LESW = _pyboard.MO_LESW
MO_LESL = _pyboard.MO_LESL
MO_LESQ = _pyboard.MO_LESQ
MO_BEUW = _pyboard.MO_BEUW
MO_BEUL = _pyboard.MO_BEUL
MO_BEUQ = _pyboard.MO_BEUQ
MO_BESW = _pyboard.MO_BESW
MO_BESL = _pyboard.MO_BESL
MO_BESQ = _pyboard.MO_BESQ
MO_SSIZE = _pyboard.MO_SSIZE

def memop_size(op):
    return _pyboard.memop_size(op)

def size_memop(size):
    return _pyboard.size_memop(size)

def memop_big_endian(op):
    return _pyboard.memop_big_endian(op)
class QTailQLink(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    tql_next = property(_pyboard.QTailQLink_tql_next_get, _pyboard.QTailQLink_tql_next_set)
    tql_prev = property(_pyboard.QTailQLink_tql_prev_get, _pyboard.QTailQLink_tql_prev_set)

    def __init__(self):
        _pyboard.QTailQLink_swiginit(self, _pyboard.new_QTailQLink())
    __swig_destroy__ = _pyboard.delete_QTailQLink

# Register QTailQLink in _pyboard:
_pyboard.QTailQLink_swigregister(QTailQLink)
DIRTY_MEMORY_VGA = _pyboard.DIRTY_MEMORY_VGA
DIRTY_MEMORY_CODE = _pyboard.DIRTY_MEMORY_CODE
DIRTY_MEMORY_MIGRATION = _pyboard.DIRTY_MEMORY_MIGRATION
DIRTY_MEMORY_NUM = _pyboard.DIRTY_MEMORY_NUM
class DirtyMemoryBlocks(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    rcu = property(_pyboard.DirtyMemoryBlocks_rcu_get, _pyboard.DirtyMemoryBlocks_rcu_set)
    blocks = property(_pyboard.DirtyMemoryBlocks_blocks_get)

    def __init__(self):
        _pyboard.DirtyMemoryBlocks_swiginit(self, _pyboard.new_DirtyMemoryBlocks())
    __swig_destroy__ = _pyboard.delete_DirtyMemoryBlocks

# Register DirtyMemoryBlocks in _pyboard:
_pyboard.DirtyMemoryBlocks_swigregister(DirtyMemoryBlocks)
class RAMList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    mutex = property(_pyboard.RAMList_mutex_get, _pyboard.RAMList_mutex_set)
    mru_block = property(_pyboard.RAMList_mru_block_get, _pyboard.RAMList_mru_block_set)
    blocks = property(_pyboard.RAMList_blocks_get)
    dirty_memory = property(_pyboard.RAMList_dirty_memory_get, _pyboard.RAMList_dirty_memory_set)
    version = property(_pyboard.RAMList_version_get, _pyboard.RAMList_version_set)
    ramblock_notifiers = property(_pyboard.RAMList_ramblock_notifiers_get)

    def __init__(self):
        _pyboard.RAMList_swiginit(self, _pyboard.new_RAMList())
    __swig_destroy__ = _pyboard.delete_RAMList

# Register RAMList in _pyboard:
_pyboard.RAMList_swigregister(RAMList)
class RAMList_ramblock_notifiers(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    lh_first = property(_pyboard.RAMList_ramblock_notifiers_lh_first_get, _pyboard.RAMList_ramblock_notifiers_lh_first_set)

    def __init__(self):
        _pyboard.RAMList_ramblock_notifiers_swiginit(self, _pyboard.new_RAMList_ramblock_notifiers())
    __swig_destroy__ = _pyboard.delete_RAMList_ramblock_notifiers

# Register RAMList_ramblock_notifiers in _pyboard:
_pyboard.RAMList_ramblock_notifiers_swigregister(RAMList_ramblock_notifiers)
class RAMList_blocks(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    lh_first = property(_pyboard.RAMList_blocks_lh_first_get, _pyboard.RAMList_blocks_lh_first_set)

    def __init__(self):
        _pyboard.RAMList_blocks_swiginit(self, _pyboard.new_RAMList_blocks())
    __swig_destroy__ = _pyboard.delete_RAMList_blocks

# Register RAMList_blocks in _pyboard:
_pyboard.RAMList_blocks_swigregister(RAMList_blocks)

def qemu_mutex_lock_ramlist():
    return _pyboard.qemu_mutex_lock_ramlist()

def qemu_mutex_unlock_ramlist():
    return _pyboard.qemu_mutex_unlock_ramlist()
class RAMBlockNotifier(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ram_block_added = property(_pyboard.RAMBlockNotifier_ram_block_added_get, _pyboard.RAMBlockNotifier_ram_block_added_set)
    ram_block_removed = property(_pyboard.RAMBlockNotifier_ram_block_removed_get, _pyboard.RAMBlockNotifier_ram_block_removed_set)
    ram_block_resized = property(_pyboard.RAMBlockNotifier_ram_block_resized_get, _pyboard.RAMBlockNotifier_ram_block_resized_set)
    next = property(_pyboard.RAMBlockNotifier_next_get)

    def __init__(self):
        _pyboard.RAMBlockNotifier_swiginit(self, _pyboard.new_RAMBlockNotifier())
    __swig_destroy__ = _pyboard.delete_RAMBlockNotifier

# Register RAMBlockNotifier in _pyboard:
_pyboard.RAMBlockNotifier_swigregister(RAMBlockNotifier)
class RAMBlockNotifier_next(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    le_next = property(_pyboard.RAMBlockNotifier_next_le_next_get, _pyboard.RAMBlockNotifier_next_le_next_set)
    le_prev = property(_pyboard.RAMBlockNotifier_next_le_prev_get, _pyboard.RAMBlockNotifier_next_le_prev_set)

    def __init__(self):
        _pyboard.RAMBlockNotifier_next_swiginit(self, _pyboard.new_RAMBlockNotifier_next())
    __swig_destroy__ = _pyboard.delete_RAMBlockNotifier_next

# Register RAMBlockNotifier_next in _pyboard:
_pyboard.RAMBlockNotifier_next_swigregister(RAMBlockNotifier_next)

def ram_block_notifier_add(n):
    return _pyboard.ram_block_notifier_add(n)

def ram_block_notifier_remove(n):
    return _pyboard.ram_block_notifier_remove(n)

def ram_block_notify_add(host, size, max_size):
    return _pyboard.ram_block_notify_add(host, size, max_size)

def ram_block_notify_remove(host, size, max_size):
    return _pyboard.ram_block_notify_remove(host, size, max_size)

def ram_block_notify_resize(host, old_size, new_size):
    return _pyboard.ram_block_notify_resize(host, old_size, new_size)

def ram_block_format():
    return _pyboard.ram_block_format()

def int128_make64(a):
    return _pyboard.int128_make64(a)

def int128_makes64(a):
    return _pyboard.int128_makes64(a)

def int128_make128(lo, hi):
    return _pyboard.int128_make128(lo, hi)

def int128_get64(a):
    return _pyboard.int128_get64(a)

def int128_getlo(a):
    return _pyboard.int128_getlo(a)

def int128_gethi(a):
    return _pyboard.int128_gethi(a)

def int128_zero():
    return _pyboard.int128_zero()

def int128_one():
    return _pyboard.int128_one()

def int128_2_64():
    return _pyboard.int128_2_64()

def int128_exts64(a):
    return _pyboard.int128_exts64(a)

def int128_not(a):
    return _pyboard.int128_not(a)

def int128_and(a, b):
    return _pyboard.int128_and(a, b)

def int128_or(a, b):
    return _pyboard.int128_or(a, b)

def int128_xor(a, b):
    return _pyboard.int128_xor(a, b)

def int128_rshift(a, n):
    return _pyboard.int128_rshift(a, n)

def int128_urshift(a, n):
    return _pyboard.int128_urshift(a, n)

def int128_lshift(a, n):
    return _pyboard.int128_lshift(a, n)

def int128_add(a, b):
    return _pyboard.int128_add(a, b)

def int128_neg(a):
    return _pyboard.int128_neg(a)

def int128_sub(a, b):
    return _pyboard.int128_sub(a, b)

def int128_nonneg(a):
    return _pyboard.int128_nonneg(a)

def int128_eq(a, b):
    return _pyboard.int128_eq(a, b)

def int128_ne(a, b):
    return _pyboard.int128_ne(a, b)

def int128_ge(a, b):
    return _pyboard.int128_ge(a, b)

def int128_uge(a, b):
    return _pyboard.int128_uge(a, b)

def int128_lt(a, b):
    return _pyboard.int128_lt(a, b)

def int128_ult(a, b):
    return _pyboard.int128_ult(a, b)

def int128_le(a, b):
    return _pyboard.int128_le(a, b)

def int128_gt(a, b):
    return _pyboard.int128_gt(a, b)

def int128_nz(a):
    return _pyboard.int128_nz(a)

def int128_min(a, b):
    return _pyboard.int128_min(a, b)

def int128_max(a, b):
    return _pyboard.int128_max(a, b)

def int128_addto(a, b):
    return _pyboard.int128_addto(a, b)

def int128_subfrom(a, b):
    return _pyboard.int128_subfrom(a, b)

def bswap128(a):
    return _pyboard.bswap128(a)

def clz128(a):
    return _pyboard.clz128(a)

def int128_divu(a, b):
    return _pyboard.int128_divu(a, b)

def int128_remu(a, b):
    return _pyboard.int128_remu(a, b)

def int128_divs(a, b):
    return _pyboard.int128_divs(a, b)

def int128_rems(a, b):
    return _pyboard.int128_rems(a, b)

def bswap128s(s):
    return _pyboard.bswap128s(s)
class Notifier(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    notify = property(_pyboard.Notifier_notify_get, _pyboard.Notifier_notify_set)
    node = property(_pyboard.Notifier_node_get)

    def __init__(self):
        _pyboard.Notifier_swiginit(self, _pyboard.new_Notifier())
    __swig_destroy__ = _pyboard.delete_Notifier

# Register Notifier in _pyboard:
_pyboard.Notifier_swigregister(Notifier)
class Notifier_node(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    le_next = property(_pyboard.Notifier_node_le_next_get, _pyboard.Notifier_node_le_next_set)
    le_prev = property(_pyboard.Notifier_node_le_prev_get, _pyboard.Notifier_node_le_prev_set)

    def __init__(self):
        _pyboard.Notifier_node_swiginit(self, _pyboard.new_Notifier_node())
    __swig_destroy__ = _pyboard.delete_Notifier_node

# Register Notifier_node in _pyboard:
_pyboard.Notifier_node_swigregister(Notifier_node)
class NotifierList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    notifiers = property(_pyboard.NotifierList_notifiers_get)

    def __init__(self):
        _pyboard.NotifierList_swiginit(self, _pyboard.new_NotifierList())
    __swig_destroy__ = _pyboard.delete_NotifierList

# Register NotifierList in _pyboard:
_pyboard.NotifierList_swigregister(NotifierList)
class NotifierList_notifiers(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    lh_first = property(_pyboard.NotifierList_notifiers_lh_first_get, _pyboard.NotifierList_notifiers_lh_first_set)

    def __init__(self):
        _pyboard.NotifierList_notifiers_swiginit(self, _pyboard.new_NotifierList_notifiers())
    __swig_destroy__ = _pyboard.delete_NotifierList_notifiers

# Register NotifierList_notifiers in _pyboard:
_pyboard.NotifierList_notifiers_swigregister(NotifierList_notifiers)

def notifier_list_init(list):
    return _pyboard.notifier_list_init(list)

def notifier_list_add(list, notifier):
    return _pyboard.notifier_list_add(list, notifier)

def notifier_remove(notifier):
    return _pyboard.notifier_remove(notifier)

def notifier_list_notify(list, data):
    return _pyboard.notifier_list_notify(list, data)

def notifier_list_empty(list):
    return _pyboard.notifier_list_empty(list)
class NotifierWithReturn(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    notify = property(_pyboard.NotifierWithReturn_notify_get, _pyboard.NotifierWithReturn_notify_set)
    node = property(_pyboard.NotifierWithReturn_node_get)

    def __init__(self):
        _pyboard.NotifierWithReturn_swiginit(self, _pyboard.new_NotifierWithReturn())
    __swig_destroy__ = _pyboard.delete_NotifierWithReturn

# Register NotifierWithReturn in _pyboard:
_pyboard.NotifierWithReturn_swigregister(NotifierWithReturn)
class NotifierWithReturn_node(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    le_next = property(_pyboard.NotifierWithReturn_node_le_next_get, _pyboard.NotifierWithReturn_node_le_next_set)
    le_prev = property(_pyboard.NotifierWithReturn_node_le_prev_get, _pyboard.NotifierWithReturn_node_le_prev_set)

    def __init__(self):
        _pyboard.NotifierWithReturn_node_swiginit(self, _pyboard.new_NotifierWithReturn_node())
    __swig_destroy__ = _pyboard.delete_NotifierWithReturn_node

# Register NotifierWithReturn_node in _pyboard:
_pyboard.NotifierWithReturn_node_swigregister(NotifierWithReturn_node)
class NotifierWithReturnList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    notifiers = property(_pyboard.NotifierWithReturnList_notifiers_get)

    def __init__(self):
        _pyboard.NotifierWithReturnList_swiginit(self, _pyboard.new_NotifierWithReturnList())
    __swig_destroy__ = _pyboard.delete_NotifierWithReturnList

# Register NotifierWithReturnList in _pyboard:
_pyboard.NotifierWithReturnList_swigregister(NotifierWithReturnList)
class NotifierWithReturnList_notifiers(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    lh_first = property(_pyboard.NotifierWithReturnList_notifiers_lh_first_get, _pyboard.NotifierWithReturnList_notifiers_lh_first_set)

    def __init__(self):
        _pyboard.NotifierWithReturnList_notifiers_swiginit(self, _pyboard.new_NotifierWithReturnList_notifiers())
    __swig_destroy__ = _pyboard.delete_NotifierWithReturnList_notifiers

# Register NotifierWithReturnList_notifiers in _pyboard:
_pyboard.NotifierWithReturnList_notifiers_swigregister(NotifierWithReturnList_notifiers)

def notifier_with_return_list_init(list):
    return _pyboard.notifier_with_return_list_init(list)

def notifier_with_return_list_add(list, notifier):
    return _pyboard.notifier_with_return_list_add(list, notifier)

def notifier_with_return_remove(notifier):
    return _pyboard.notifier_with_return_remove(notifier)

def notifier_with_return_list_notify(list, data):
    return _pyboard.notifier_with_return_list_notify(list, data)
class rcu_reader_data(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ctr = property(_pyboard.rcu_reader_data_ctr_get, _pyboard.rcu_reader_data_ctr_set)
    waiting = property(_pyboard.rcu_reader_data_waiting_get, _pyboard.rcu_reader_data_waiting_set)
    depth = property(_pyboard.rcu_reader_data_depth_get, _pyboard.rcu_reader_data_depth_set)
    node = property(_pyboard.rcu_reader_data_node_get)
    force_rcu = property(_pyboard.rcu_reader_data_force_rcu_get, _pyboard.rcu_reader_data_force_rcu_set)

    def __init__(self):
        _pyboard.rcu_reader_data_swiginit(self, _pyboard.new_rcu_reader_data())
    __swig_destroy__ = _pyboard.delete_rcu_reader_data

# Register rcu_reader_data in _pyboard:
_pyboard.rcu_reader_data_swigregister(rcu_reader_data)
class rcu_reader_data_node(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    le_next = property(_pyboard.rcu_reader_data_node_le_next_get, _pyboard.rcu_reader_data_node_le_next_set)
    le_prev = property(_pyboard.rcu_reader_data_node_le_prev_get, _pyboard.rcu_reader_data_node_le_prev_set)

    def __init__(self):
        _pyboard.rcu_reader_data_node_swiginit(self, _pyboard.new_rcu_reader_data_node())
    __swig_destroy__ = _pyboard.delete_rcu_reader_data_node

# Register rcu_reader_data_node in _pyboard:
_pyboard.rcu_reader_data_node_swigregister(rcu_reader_data_node)

def get_rcu_reader():
    return _pyboard.get_rcu_reader()

def set_rcu_reader(v):
    return _pyboard.set_rcu_reader(v)

def get_ptr_rcu_reader():
    return _pyboard.get_ptr_rcu_reader()

def rcu_read_lock():
    return _pyboard.rcu_read_lock()

def rcu_read_unlock():
    return _pyboard.rcu_read_unlock()

def synchronize_rcu():
    return _pyboard.synchronize_rcu()

def rcu_register_thread():
    return _pyboard.rcu_register_thread()

def rcu_unregister_thread():
    return _pyboard.rcu_unregister_thread()

def rcu_enable_atfork():
    return _pyboard.rcu_enable_atfork()

def rcu_disable_atfork():
    return _pyboard.rcu_disable_atfork()
class rcu_head(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    next = property(_pyboard.rcu_head_next_get, _pyboard.rcu_head_next_set)
    func = property(_pyboard.rcu_head_func_get, _pyboard.rcu_head_func_set)

    def __init__(self):
        _pyboard.rcu_head_swiginit(self, _pyboard.new_rcu_head())
    __swig_destroy__ = _pyboard.delete_rcu_head

# Register rcu_head in _pyboard:
_pyboard.rcu_head_swigregister(rcu_head)

def call_rcu1(head, func):
    return _pyboard.call_rcu1(head, func)

def drain_call_rcu():
    return _pyboard.drain_call_rcu()

def rcu_read_auto_lock():
    return _pyboard.rcu_read_auto_lock()

def rcu_read_auto_unlock(r):
    return _pyboard.rcu_read_auto_unlock(r)

def rcu_add_force_rcu_notifier(n):
    return _pyboard.rcu_add_force_rcu_notifier(n)

def rcu_remove_force_rcu_notifier(n):
    return _pyboard.rcu_remove_force_rcu_notifier(n)
ERROR_CLASS_GENERIC_ERROR = _pyboard.ERROR_CLASS_GENERIC_ERROR
ERROR_CLASS_COMMAND_NOT_FOUND = _pyboard.ERROR_CLASS_COMMAND_NOT_FOUND
ERROR_CLASS_DEVICE_NOT_ACTIVE = _pyboard.ERROR_CLASS_DEVICE_NOT_ACTIVE
ERROR_CLASS_DEVICE_NOT_FOUND = _pyboard.ERROR_CLASS_DEVICE_NOT_FOUND
ERROR_CLASS_KVM_MISSING_CAP = _pyboard.ERROR_CLASS_KVM_MISSING_CAP

def error_get_pretty(err):
    return _pyboard.error_get_pretty(err)

def error_get_class(err):
    return _pyboard.error_get_class(err)

def error_setg_internal(*args):
    return _pyboard.error_setg_internal(*args)

def error_setg_errno_internal(*args):
    return _pyboard.error_setg_errno_internal(*args)

def error_propagate(dst_errp, local_err):
    return _pyboard.error_propagate(dst_errp, local_err)

def error_propagate_prepend(*args):
    return _pyboard.error_propagate_prepend(*args)

def error_prepend(*args):
    return _pyboard.error_prepend(*args)

def error_append_hint(*args):
    return _pyboard.error_append_hint(*args)

def error_setg_file_open_internal(errp, src, line, func, os_errno, filename):
    return _pyboard.error_setg_file_open_internal(errp, src, line, func, os_errno, filename)

def error_copy(err):
    return _pyboard.error_copy(err)

def error_free(err):
    return _pyboard.error_free(err)

def error_free_or_abort(errp):
    return _pyboard.error_free_or_abort(errp)

def warn_report_err(err):
    return _pyboard.warn_report_err(err)

def error_report_err(err):
    return _pyboard.error_report_err(err)

def warn_reportf_err(*args):
    return _pyboard.warn_reportf_err(*args)

def error_reportf_err(*args):
    return _pyboard.error_reportf_err(*args)

def error_set_internal(*args):
    return _pyboard.error_set_internal(*args)
class ErrorPropagator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    local_err = property(_pyboard.ErrorPropagator_local_err_get, _pyboard.ErrorPropagator_local_err_set)
    errp = property(_pyboard.ErrorPropagator_errp_get, _pyboard.ErrorPropagator_errp_set)

    def __init__(self):
        _pyboard.ErrorPropagator_swiginit(self, _pyboard.new_ErrorPropagator())
    __swig_destroy__ = _pyboard.delete_ErrorPropagator

# Register ErrorPropagator in _pyboard:
_pyboard.ErrorPropagator_swigregister(ErrorPropagator)

def error_propagator_cleanup(prop):
    return _pyboard.error_propagator_cleanup(prop)
class Location(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    kind = property(_pyboard.Location_kind_get, _pyboard.Location_kind_set)
    num = property(_pyboard.Location_num_get, _pyboard.Location_num_set)
    ptr = property(_pyboard.Location_ptr_get, _pyboard.Location_ptr_set)
    prev = property(_pyboard.Location_prev_get, _pyboard.Location_prev_set)

    def __init__(self):
        _pyboard.Location_swiginit(self, _pyboard.new_Location())
    __swig_destroy__ = _pyboard.delete_Location

# Register Location in _pyboard:
_pyboard.Location_swigregister(Location)
LOC_NONE = _pyboard.LOC_NONE
LOC_CMDLINE = _pyboard.LOC_CMDLINE
LOC_FILE = _pyboard.LOC_FILE


def loc_push_restore(loc):
    return _pyboard.loc_push_restore(loc)

def loc_push_none(loc):
    return _pyboard.loc_push_none(loc)

def loc_pop(loc):
    return _pyboard.loc_pop(loc)

def loc_save(loc):
    return _pyboard.loc_save(loc)

def loc_restore(loc):
    return _pyboard.loc_restore(loc)

def loc_set_none():
    return _pyboard.loc_set_none()

def loc_set_cmdline(argv, idx, cnt):
    return _pyboard.loc_set_cmdline(argv, idx, cnt)

def loc_set_file(fname, lno):
    return _pyboard.loc_set_file(fname, lno)

def error_printf(*args):
    return _pyboard.error_printf(*args)

def error_report(*args):
    return _pyboard.error_report(*args)

def warn_report(*args):
    return _pyboard.warn_report(*args)

def info_report(*args):
    return _pyboard.info_report(*args)

def error_report_once_cond(*args):
    return _pyboard.error_report_once_cond(*args)

def warn_report_once_cond(*args):
    return _pyboard.warn_report_once_cond(*args)

def error_init(argv0):
    return _pyboard.error_init(argv0)
TYPE_MACHINE_SUFFIX = _pyboard.TYPE_MACHINE_SUFFIX
TYPE_MACHINE = _pyboard.TYPE_MACHINE

def MACHINE(obj):
    return _pyboard.MACHINE(obj)

def MACHINE_GET_CLASS(obj):
    return _pyboard.MACHINE_GET_CLASS(obj)

def MACHINE_CLASS(klass):
    return _pyboard.MACHINE_CLASS(klass)

def machine_add_audiodev_property(mc):
    return _pyboard.machine_add_audiodev_property(mc)

def machine_run_board_init(machine, mem_path, errp):
    return _pyboard.machine_run_board_init(machine, mem_path, errp)

def machine_usb(machine):
    return _pyboard.machine_usb(machine)

def machine_phandle_start(machine):
    return _pyboard.machine_phandle_start(machine)

def machine_dump_guest_core(machine):
    return _pyboard.machine_dump_guest_core(machine)

def machine_mem_merge(machine):
    return _pyboard.machine_mem_merge(machine)

def machine_query_hotpluggable_cpus(machine):
    return _pyboard.machine_query_hotpluggable_cpus(machine)

def machine_set_cpu_numa_node(machine, props, errp):
    return _pyboard.machine_set_cpu_numa_node(machine, props, errp)

def machine_parse_smp_config(ms, config, errp):
    return _pyboard.machine_parse_smp_config(ms, config, errp)

def machine_topo_get_cores_per_socket(ms):
    return _pyboard.machine_topo_get_cores_per_socket(ms)

def machine_topo_get_threads_per_socket(ms):
    return _pyboard.machine_topo_get_threads_per_socket(ms)

def machine_memory_devices_init(ms, base, size):
    return _pyboard.machine_memory_devices_init(ms, base, size)

def machine_class_allow_dynamic_sysbus_dev(mc, type):
    return _pyboard.machine_class_allow_dynamic_sysbus_dev(mc, type)

def device_type_is_dynamic_sysbus(mc, type):
    return _pyboard.device_type_is_dynamic_sysbus(mc, type)

def device_is_dynamic_sysbus(mc, dev):
    return _pyboard.device_is_dynamic_sysbus(mc, dev)

def machine_consume_memdev(machine, backend):
    return _pyboard.machine_consume_memdev(machine, backend)
class CPUArchId(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    arch_id = property(_pyboard.CPUArchId_arch_id_get, _pyboard.CPUArchId_arch_id_set)
    vcpus_count = property(_pyboard.CPUArchId_vcpus_count_get, _pyboard.CPUArchId_vcpus_count_set)
    props = property(_pyboard.CPUArchId_props_get, _pyboard.CPUArchId_props_set)
    cpu = property(_pyboard.CPUArchId_cpu_get, _pyboard.CPUArchId_cpu_set)
    type = property(_pyboard.CPUArchId_type_get, _pyboard.CPUArchId_type_set)

    def __init__(self):
        _pyboard.CPUArchId_swiginit(self, _pyboard.new_CPUArchId())
    __swig_destroy__ = _pyboard.delete_CPUArchId

# Register CPUArchId in _pyboard:
_pyboard.CPUArchId_swigregister(CPUArchId)
class CPUArchIdList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    len = property(_pyboard.CPUArchIdList_len_get, _pyboard.CPUArchIdList_len_set)
    cpus = property(_pyboard.CPUArchIdList_cpus_get)

    def __init__(self):
        _pyboard.CPUArchIdList_swiginit(self, _pyboard.new_CPUArchIdList())
    __swig_destroy__ = _pyboard.delete_CPUArchIdList

# Register CPUArchIdList in _pyboard:
_pyboard.CPUArchIdList_swigregister(CPUArchIdList)
class SMPCompatProps(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    prefer_sockets = property(_pyboard.SMPCompatProps_prefer_sockets_get, _pyboard.SMPCompatProps_prefer_sockets_set)
    dies_supported = property(_pyboard.SMPCompatProps_dies_supported_get, _pyboard.SMPCompatProps_dies_supported_set)
    clusters_supported = property(_pyboard.SMPCompatProps_clusters_supported_get, _pyboard.SMPCompatProps_clusters_supported_set)
    has_clusters = property(_pyboard.SMPCompatProps_has_clusters_get, _pyboard.SMPCompatProps_has_clusters_set)
    books_supported = property(_pyboard.SMPCompatProps_books_supported_get, _pyboard.SMPCompatProps_books_supported_set)
    drawers_supported = property(_pyboard.SMPCompatProps_drawers_supported_get, _pyboard.SMPCompatProps_drawers_supported_set)

    def __init__(self):
        _pyboard.SMPCompatProps_swiginit(self, _pyboard.new_SMPCompatProps())
    __swig_destroy__ = _pyboard.delete_SMPCompatProps

# Register SMPCompatProps in _pyboard:
_pyboard.SMPCompatProps_swigregister(SMPCompatProps)
class MachineClass(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    parent_class = property(_pyboard.MachineClass_parent_class_get, _pyboard.MachineClass_parent_class_set)
    family = property(_pyboard.MachineClass_family_get, _pyboard.MachineClass_family_set)
    name = property(_pyboard.MachineClass_name_get, _pyboard.MachineClass_name_set)
    alias = property(_pyboard.MachineClass_alias_get, _pyboard.MachineClass_alias_set)
    desc = property(_pyboard.MachineClass_desc_get, _pyboard.MachineClass_desc_set)
    deprecation_reason = property(_pyboard.MachineClass_deprecation_reason_get, _pyboard.MachineClass_deprecation_reason_set)
    _init = property(_pyboard.MachineClass__init_get, _pyboard.MachineClass__init_set)
    reset = property(_pyboard.MachineClass_reset_get, _pyboard.MachineClass_reset_set)
    wakeup = property(_pyboard.MachineClass_wakeup_get, _pyboard.MachineClass_wakeup_set)
    kvm_type = property(_pyboard.MachineClass_kvm_type_get, _pyboard.MachineClass_kvm_type_set)
    block_default_type = property(_pyboard.MachineClass_block_default_type_get, _pyboard.MachineClass_block_default_type_set)
    units_per_default_bus = property(_pyboard.MachineClass_units_per_default_bus_get, _pyboard.MachineClass_units_per_default_bus_set)
    max_cpus = property(_pyboard.MachineClass_max_cpus_get, _pyboard.MachineClass_max_cpus_set)
    min_cpus = property(_pyboard.MachineClass_min_cpus_get, _pyboard.MachineClass_min_cpus_set)
    default_cpus = property(_pyboard.MachineClass_default_cpus_get, _pyboard.MachineClass_default_cpus_set)
    no_serial = property(_pyboard.MachineClass_no_serial_get, _pyboard.MachineClass_no_serial_set)
    no_parallel = property(_pyboard.MachineClass_no_parallel_get, _pyboard.MachineClass_no_parallel_set)
    no_floppy = property(_pyboard.MachineClass_no_floppy_get, _pyboard.MachineClass_no_floppy_set)
    no_cdrom = property(_pyboard.MachineClass_no_cdrom_get, _pyboard.MachineClass_no_cdrom_set)
    no_sdcard = property(_pyboard.MachineClass_no_sdcard_get, _pyboard.MachineClass_no_sdcard_set)
    pci_allow_0_address = property(_pyboard.MachineClass_pci_allow_0_address_get, _pyboard.MachineClass_pci_allow_0_address_set)
    legacy_fw_cfg_order = property(_pyboard.MachineClass_legacy_fw_cfg_order_get, _pyboard.MachineClass_legacy_fw_cfg_order_set)
    is_default = property(_pyboard.MachineClass_is_default_get, _pyboard.MachineClass_is_default_set)
    default_machine_opts = property(_pyboard.MachineClass_default_machine_opts_get, _pyboard.MachineClass_default_machine_opts_set)
    default_boot_order = property(_pyboard.MachineClass_default_boot_order_get, _pyboard.MachineClass_default_boot_order_set)
    default_display = property(_pyboard.MachineClass_default_display_get, _pyboard.MachineClass_default_display_set)
    default_nic = property(_pyboard.MachineClass_default_nic_get, _pyboard.MachineClass_default_nic_set)
    compat_props = property(_pyboard.MachineClass_compat_props_get, _pyboard.MachineClass_compat_props_set)
    hw_version = property(_pyboard.MachineClass_hw_version_get, _pyboard.MachineClass_hw_version_set)
    default_ram_size = property(_pyboard.MachineClass_default_ram_size_get, _pyboard.MachineClass_default_ram_size_set)
    default_cpu_type = property(_pyboard.MachineClass_default_cpu_type_get, _pyboard.MachineClass_default_cpu_type_set)
    default_kernel_irqchip_split = property(_pyboard.MachineClass_default_kernel_irqchip_split_get, _pyboard.MachineClass_default_kernel_irqchip_split_set)
    option_rom_has_mr = property(_pyboard.MachineClass_option_rom_has_mr_get, _pyboard.MachineClass_option_rom_has_mr_set)
    rom_file_has_mr = property(_pyboard.MachineClass_rom_file_has_mr_get, _pyboard.MachineClass_rom_file_has_mr_set)
    minimum_page_bits = property(_pyboard.MachineClass_minimum_page_bits_get, _pyboard.MachineClass_minimum_page_bits_set)
    has_hotpluggable_cpus = property(_pyboard.MachineClass_has_hotpluggable_cpus_get, _pyboard.MachineClass_has_hotpluggable_cpus_set)
    ignore_memory_transaction_failures = property(_pyboard.MachineClass_ignore_memory_transaction_failures_get, _pyboard.MachineClass_ignore_memory_transaction_failures_set)
    numa_mem_align_shift = property(_pyboard.MachineClass_numa_mem_align_shift_get, _pyboard.MachineClass_numa_mem_align_shift_set)
    valid_cpu_types = property(_pyboard.MachineClass_valid_cpu_types_get, _pyboard.MachineClass_valid_cpu_types_set)
    allowed_dynamic_sysbus_devices = property(_pyboard.MachineClass_allowed_dynamic_sysbus_devices_get, _pyboard.MachineClass_allowed_dynamic_sysbus_devices_set)
    auto_enable_numa_with_memhp = property(_pyboard.MachineClass_auto_enable_numa_with_memhp_get, _pyboard.MachineClass_auto_enable_numa_with_memhp_set)
    auto_enable_numa_with_memdev = property(_pyboard.MachineClass_auto_enable_numa_with_memdev_get, _pyboard.MachineClass_auto_enable_numa_with_memdev_set)
    ignore_boot_device_suffixes = property(_pyboard.MachineClass_ignore_boot_device_suffixes_get, _pyboard.MachineClass_ignore_boot_device_suffixes_set)
    smbus_no_migration_support = property(_pyboard.MachineClass_smbus_no_migration_support_get, _pyboard.MachineClass_smbus_no_migration_support_set)
    nvdimm_supported = property(_pyboard.MachineClass_nvdimm_supported_get, _pyboard.MachineClass_nvdimm_supported_set)
    numa_mem_supported = property(_pyboard.MachineClass_numa_mem_supported_get, _pyboard.MachineClass_numa_mem_supported_set)
    auto_enable_numa = property(_pyboard.MachineClass_auto_enable_numa_get, _pyboard.MachineClass_auto_enable_numa_set)
    cpu_cluster_has_numa_boundary = property(_pyboard.MachineClass_cpu_cluster_has_numa_boundary_get, _pyboard.MachineClass_cpu_cluster_has_numa_boundary_set)
    smp_props = property(_pyboard.MachineClass_smp_props_get, _pyboard.MachineClass_smp_props_set)
    default_ram_id = property(_pyboard.MachineClass_default_ram_id_get, _pyboard.MachineClass_default_ram_id_set)
    get_hotplug_handler = property(_pyboard.MachineClass_get_hotplug_handler_get, _pyboard.MachineClass_get_hotplug_handler_set)
    hotplug_allowed = property(_pyboard.MachineClass_hotplug_allowed_get, _pyboard.MachineClass_hotplug_allowed_set)
    cpu_index_to_instance_props = property(_pyboard.MachineClass_cpu_index_to_instance_props_get, _pyboard.MachineClass_cpu_index_to_instance_props_set)
    possible_cpu_arch_ids = property(_pyboard.MachineClass_possible_cpu_arch_ids_get, _pyboard.MachineClass_possible_cpu_arch_ids_set)
    get_default_cpu_node_id = property(_pyboard.MachineClass_get_default_cpu_node_id_get, _pyboard.MachineClass_get_default_cpu_node_id_set)
    fixup_ram_size = property(_pyboard.MachineClass_fixup_ram_size_get, _pyboard.MachineClass_fixup_ram_size_set)

    init = property(None, _pyboard.MachineClass_init_set)


    def __init__(self):
        _pyboard.MachineClass_swiginit(self, _pyboard.new_MachineClass())
    __swig_destroy__ = _pyboard.delete_MachineClass

# Register MachineClass in _pyboard:
_pyboard.MachineClass_swigregister(MachineClass)
class DeviceMemoryState(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    base = property(_pyboard.DeviceMemoryState_base_get, _pyboard.DeviceMemoryState_base_set)
    mr = property(_pyboard.DeviceMemoryState_mr_get, _pyboard.DeviceMemoryState_mr_set)
    _as = property(_pyboard.DeviceMemoryState__as_get, _pyboard.DeviceMemoryState__as_set)
    listener = property(_pyboard.DeviceMemoryState_listener_get, _pyboard.DeviceMemoryState_listener_set)
    dimm_size = property(_pyboard.DeviceMemoryState_dimm_size_get, _pyboard.DeviceMemoryState_dimm_size_set)
    used_region_size = property(_pyboard.DeviceMemoryState_used_region_size_get, _pyboard.DeviceMemoryState_used_region_size_set)
    required_memslots = property(_pyboard.DeviceMemoryState_required_memslots_get, _pyboard.DeviceMemoryState_required_memslots_set)
    used_memslots = property(_pyboard.DeviceMemoryState_used_memslots_get, _pyboard.DeviceMemoryState_used_memslots_set)
    memslot_auto_decision_active = property(_pyboard.DeviceMemoryState_memslot_auto_decision_active_get, _pyboard.DeviceMemoryState_memslot_auto_decision_active_set)

    def __init__(self):
        _pyboard.DeviceMemoryState_swiginit(self, _pyboard.new_DeviceMemoryState())
    __swig_destroy__ = _pyboard.delete_DeviceMemoryState

# Register DeviceMemoryState in _pyboard:
_pyboard.DeviceMemoryState_swigregister(DeviceMemoryState)
class CpuTopology(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    cpus = property(_pyboard.CpuTopology_cpus_get, _pyboard.CpuTopology_cpus_set)
    drawers = property(_pyboard.CpuTopology_drawers_get, _pyboard.CpuTopology_drawers_set)
    books = property(_pyboard.CpuTopology_books_get, _pyboard.CpuTopology_books_set)
    sockets = property(_pyboard.CpuTopology_sockets_get, _pyboard.CpuTopology_sockets_set)
    dies = property(_pyboard.CpuTopology_dies_get, _pyboard.CpuTopology_dies_set)
    clusters = property(_pyboard.CpuTopology_clusters_get, _pyboard.CpuTopology_clusters_set)
    cores = property(_pyboard.CpuTopology_cores_get, _pyboard.CpuTopology_cores_set)
    threads = property(_pyboard.CpuTopology_threads_get, _pyboard.CpuTopology_threads_set)
    max_cpus = property(_pyboard.CpuTopology_max_cpus_get, _pyboard.CpuTopology_max_cpus_set)

    def __init__(self):
        _pyboard.CpuTopology_swiginit(self, _pyboard.new_CpuTopology())
    __swig_destroy__ = _pyboard.delete_CpuTopology

# Register CpuTopology in _pyboard:
_pyboard.CpuTopology_swigregister(CpuTopology)
class MachineState(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    parent_obj = property(_pyboard.MachineState_parent_obj_get, _pyboard.MachineState_parent_obj_set)
    fdt = property(_pyboard.MachineState_fdt_get, _pyboard.MachineState_fdt_set)
    dtb = property(_pyboard.MachineState_dtb_get, _pyboard.MachineState_dtb_set)
    dumpdtb = property(_pyboard.MachineState_dumpdtb_get, _pyboard.MachineState_dumpdtb_set)
    phandle_start = property(_pyboard.MachineState_phandle_start_get, _pyboard.MachineState_phandle_start_set)
    dt_compatible = property(_pyboard.MachineState_dt_compatible_get, _pyboard.MachineState_dt_compatible_set)
    dump_guest_core = property(_pyboard.MachineState_dump_guest_core_get, _pyboard.MachineState_dump_guest_core_set)
    mem_merge = property(_pyboard.MachineState_mem_merge_get, _pyboard.MachineState_mem_merge_set)
    usb = property(_pyboard.MachineState_usb_get, _pyboard.MachineState_usb_set)
    usb_disabled = property(_pyboard.MachineState_usb_disabled_get, _pyboard.MachineState_usb_disabled_set)
    firmware = property(_pyboard.MachineState_firmware_get, _pyboard.MachineState_firmware_set)
    iommu = property(_pyboard.MachineState_iommu_get, _pyboard.MachineState_iommu_set)
    suppress_vmdesc = property(_pyboard.MachineState_suppress_vmdesc_get, _pyboard.MachineState_suppress_vmdesc_set)
    enable_graphics = property(_pyboard.MachineState_enable_graphics_get, _pyboard.MachineState_enable_graphics_set)
    cgs = property(_pyboard.MachineState_cgs_get, _pyboard.MachineState_cgs_set)
    memdev = property(_pyboard.MachineState_memdev_get, _pyboard.MachineState_memdev_set)
    ram = property(_pyboard.MachineState_ram_get, _pyboard.MachineState_ram_set)
    device_memory = property(_pyboard.MachineState_device_memory_get, _pyboard.MachineState_device_memory_set)
    audiodev = property(_pyboard.MachineState_audiodev_get, _pyboard.MachineState_audiodev_set)
    ram_size = property(_pyboard.MachineState_ram_size_get, _pyboard.MachineState_ram_size_set)
    maxram_size = property(_pyboard.MachineState_maxram_size_get, _pyboard.MachineState_maxram_size_set)
    ram_slots = property(_pyboard.MachineState_ram_slots_get, _pyboard.MachineState_ram_slots_set)
    boot_config = property(_pyboard.MachineState_boot_config_get, _pyboard.MachineState_boot_config_set)
    kernel_filename = property(_pyboard.MachineState_kernel_filename_get, _pyboard.MachineState_kernel_filename_set)
    kernel_cmdline = property(_pyboard.MachineState_kernel_cmdline_get, _pyboard.MachineState_kernel_cmdline_set)
    initrd_filename = property(_pyboard.MachineState_initrd_filename_get, _pyboard.MachineState_initrd_filename_set)
    cpu_type = property(_pyboard.MachineState_cpu_type_get, _pyboard.MachineState_cpu_type_set)
    accelerator = property(_pyboard.MachineState_accelerator_get, _pyboard.MachineState_accelerator_set)
    possible_cpus = property(_pyboard.MachineState_possible_cpus_get, _pyboard.MachineState_possible_cpus_set)
    smp = property(_pyboard.MachineState_smp_get, _pyboard.MachineState_smp_set)
    nvdimms_state = property(_pyboard.MachineState_nvdimms_state_get, _pyboard.MachineState_nvdimms_state_set)
    numa_state = property(_pyboard.MachineState_numa_state_get, _pyboard.MachineState_numa_state_set)

    def __init__(self):
        _pyboard.MachineState_swiginit(self, _pyboard.new_MachineState())
    __swig_destroy__ = _pyboard.delete_MachineState

# Register MachineState in _pyboard:
_pyboard.MachineState_swigregister(MachineState)
class Property(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    name = property(_pyboard.Property_name_get, _pyboard.Property_name_set)
    info = property(_pyboard.Property_info_get, _pyboard.Property_info_set)
    offset = property(_pyboard.Property_offset_get, _pyboard.Property_offset_set)
    bitnr = property(_pyboard.Property_bitnr_get, _pyboard.Property_bitnr_set)
    bitmask = property(_pyboard.Property_bitmask_get, _pyboard.Property_bitmask_set)
    set_default = property(_pyboard.Property_set_default_get, _pyboard.Property_set_default_set)
    defval = property(_pyboard.Property_defval_get)
    arrayoffset = property(_pyboard.Property_arrayoffset_get, _pyboard.Property_arrayoffset_set)
    arrayinfo = property(_pyboard.Property_arrayinfo_get, _pyboard.Property_arrayinfo_set)
    arrayfieldsize = property(_pyboard.Property_arrayfieldsize_get, _pyboard.Property_arrayfieldsize_set)
    link_type = property(_pyboard.Property_link_type_get, _pyboard.Property_link_type_set)

    def __init__(self):
        _pyboard.Property_swiginit(self, _pyboard.new_Property())
    __swig_destroy__ = _pyboard.delete_Property

# Register Property in _pyboard:
_pyboard.Property_swigregister(Property)
hw_compat_8_1_len = cvar.hw_compat_8_1_len
hw_compat_8_0_len = cvar.hw_compat_8_0_len
hw_compat_7_2_len = cvar.hw_compat_7_2_len
hw_compat_7_1_len = cvar.hw_compat_7_1_len
hw_compat_7_0_len = cvar.hw_compat_7_0_len
hw_compat_6_2_len = cvar.hw_compat_6_2_len
hw_compat_6_1_len = cvar.hw_compat_6_1_len
hw_compat_6_0_len = cvar.hw_compat_6_0_len
hw_compat_5_2_len = cvar.hw_compat_5_2_len
hw_compat_5_1_len = cvar.hw_compat_5_1_len
hw_compat_5_0_len = cvar.hw_compat_5_0_len
hw_compat_4_2_len = cvar.hw_compat_4_2_len
hw_compat_4_1_len = cvar.hw_compat_4_1_len
hw_compat_4_0_len = cvar.hw_compat_4_0_len
hw_compat_3_1_len = cvar.hw_compat_3_1_len
hw_compat_3_0_len = cvar.hw_compat_3_0_len
hw_compat_2_12_len = cvar.hw_compat_2_12_len
hw_compat_2_11_len = cvar.hw_compat_2_11_len
hw_compat_2_10_len = cvar.hw_compat_2_10_len
hw_compat_2_9_len = cvar.hw_compat_2_9_len
hw_compat_2_8_len = cvar.hw_compat_2_8_len
hw_compat_2_7_len = cvar.hw_compat_2_7_len
hw_compat_2_6_len = cvar.hw_compat_2_6_len
hw_compat_2_5_len = cvar.hw_compat_2_5_len
hw_compat_2_4_len = cvar.hw_compat_2_4_len
hw_compat_2_3_len = cvar.hw_compat_2_3_len
hw_compat_2_2_len = cvar.hw_compat_2_2_len
hw_compat_2_1_len = cvar.hw_compat_2_1_len

class Property_defval(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    i = property(_pyboard.Property_defval_i_get, _pyboard.Property_defval_i_set)
    u = property(_pyboard.Property_defval_u_get, _pyboard.Property_defval_u_set)

    def __init__(self):
        _pyboard.Property_defval_swiginit(self, _pyboard.new_Property_defval())
    __swig_destroy__ = _pyboard.delete_Property_defval

# Register Property_defval in _pyboard:
_pyboard.Property_defval_swigregister(Property_defval)
class PropertyInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    name = property(_pyboard.PropertyInfo_name_get, _pyboard.PropertyInfo_name_set)
    description = property(_pyboard.PropertyInfo_description_get, _pyboard.PropertyInfo_description_set)
    enum_table = property(_pyboard.PropertyInfo_enum_table_get, _pyboard.PropertyInfo_enum_table_set)
    realized_set_allowed = property(_pyboard.PropertyInfo_realized_set_allowed_get, _pyboard.PropertyInfo_realized_set_allowed_set)
    _print = property(_pyboard.PropertyInfo__print_get, _pyboard.PropertyInfo__print_set)
    set_default_value = property(_pyboard.PropertyInfo_set_default_value_get, _pyboard.PropertyInfo_set_default_value_set)
    create = property(_pyboard.PropertyInfo_create_get, _pyboard.PropertyInfo_create_set)
    get = property(_pyboard.PropertyInfo_get_get, _pyboard.PropertyInfo_get_set)
    set = property(_pyboard.PropertyInfo_set_get, _pyboard.PropertyInfo_set_set)
    release = property(_pyboard.PropertyInfo_release_get, _pyboard.PropertyInfo_release_set)

    def __init__(self):
        _pyboard.PropertyInfo_swiginit(self, _pyboard.new_PropertyInfo())
    __swig_destroy__ = _pyboard.delete_PropertyInfo

# Register PropertyInfo in _pyboard:
_pyboard.PropertyInfo_swigregister(PropertyInfo)

def qdev_prop_set_drive_err(dev, name, value, errp):
    return _pyboard.qdev_prop_set_drive_err(dev, name, value, errp)

def qdev_prop_set_bit(dev, name, value):
    return _pyboard.qdev_prop_set_bit(dev, name, value)

def qdev_prop_set_uint8(dev, name, value):
    return _pyboard.qdev_prop_set_uint8(dev, name, value)

def qdev_prop_set_uint16(dev, name, value):
    return _pyboard.qdev_prop_set_uint16(dev, name, value)

def qdev_prop_set_uint32(dev, name, value):
    return _pyboard.qdev_prop_set_uint32(dev, name, value)

def qdev_prop_set_int32(dev, name, value):
    return _pyboard.qdev_prop_set_int32(dev, name, value)

def qdev_prop_set_uint64(dev, name, value):
    return _pyboard.qdev_prop_set_uint64(dev, name, value)

def qdev_prop_set_string(dev, name, value):
    return _pyboard.qdev_prop_set_string(dev, name, value)

def qdev_prop_set_chr(dev, name, value):
    return _pyboard.qdev_prop_set_chr(dev, name, value)

def qdev_prop_set_netdev(dev, name, value):
    return _pyboard.qdev_prop_set_netdev(dev, name, value)

def qdev_prop_set_drive(dev, name, value):
    return _pyboard.qdev_prop_set_drive(dev, name, value)

def qdev_prop_set_macaddr(dev, name, value):
    return _pyboard.qdev_prop_set_macaddr(dev, name, value)

def qdev_prop_set_enum(dev, name, value):
    return _pyboard.qdev_prop_set_enum(dev, name, value)

def qdev_prop_set_array(dev, name, values):
    return _pyboard.qdev_prop_set_array(dev, name, values)

def object_field_prop_ptr(obj, prop):
    return _pyboard.object_field_prop_ptr(obj, prop)

def qdev_prop_register_global(prop):
    return _pyboard.qdev_prop_register_global(prop)

def qdev_find_global_prop(obj, name):
    return _pyboard.qdev_find_global_prop(obj, name)

def qdev_prop_check_globals():
    return _pyboard.qdev_prop_check_globals()

def qdev_prop_set_globals(dev):
    return _pyboard.qdev_prop_set_globals(dev)

def error_set_from_qdev_prop_error(errp, ret, obj, name, value):
    return _pyboard.error_set_from_qdev_prop_error(errp, ret, obj, name, value)

def qdev_property_add_static(dev, prop):
    return _pyboard.qdev_property_add_static(dev, prop)

def qdev_alias_all_properties(target, source):
    return _pyboard.qdev_alias_all_properties(target, source)

def qdev_prop_set_after_realize(dev, name, errp):
    return _pyboard.qdev_prop_set_after_realize(dev, name, errp)

def qdev_prop_allow_set_link_before_realize(obj, name, val, errp):
    return _pyboard.qdev_prop_allow_set_link_before_realize(obj, name, val, errp)
IF_DEFAULT = _pyboard.IF_DEFAULT
IF_NONE = _pyboard.IF_NONE
IF_IDE = _pyboard.IF_IDE
IF_SCSI = _pyboard.IF_SCSI
IF_FLOPPY = _pyboard.IF_FLOPPY
IF_PFLASH = _pyboard.IF_PFLASH
IF_MTD = _pyboard.IF_MTD
IF_SD = _pyboard.IF_SD
IF_VIRTIO = _pyboard.IF_VIRTIO
IF_XEN = _pyboard.IF_XEN
IF_COUNT = _pyboard.IF_COUNT
class DriveInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    type = property(_pyboard.DriveInfo_type_get, _pyboard.DriveInfo_type_set)
    bus = property(_pyboard.DriveInfo_bus_get, _pyboard.DriveInfo_bus_set)
    unit = property(_pyboard.DriveInfo_unit_get, _pyboard.DriveInfo_unit_set)
    auto_del = property(_pyboard.DriveInfo_auto_del_get, _pyboard.DriveInfo_auto_del_set)
    is_default = property(_pyboard.DriveInfo_is_default_get, _pyboard.DriveInfo_is_default_set)
    media_cd = property(_pyboard.DriveInfo_media_cd_get, _pyboard.DriveInfo_media_cd_set)
    opts = property(_pyboard.DriveInfo_opts_get, _pyboard.DriveInfo_opts_set)
    next = property(_pyboard.DriveInfo_next_get)

    def __init__(self):
        _pyboard.DriveInfo_swiginit(self, _pyboard.new_DriveInfo())
    __swig_destroy__ = _pyboard.delete_DriveInfo

# Register DriveInfo in _pyboard:
_pyboard.DriveInfo_swigregister(DriveInfo)
qdev_prop_bit = cvar.qdev_prop_bit
qdev_prop_bit64 = cvar.qdev_prop_bit64
qdev_prop_bool = cvar.qdev_prop_bool
qdev_prop_enum = cvar.qdev_prop_enum
qdev_prop_uint8 = cvar.qdev_prop_uint8
qdev_prop_uint16 = cvar.qdev_prop_uint16
qdev_prop_uint32 = cvar.qdev_prop_uint32
qdev_prop_int32 = cvar.qdev_prop_int32
qdev_prop_uint64 = cvar.qdev_prop_uint64
qdev_prop_uint64_checkmask = cvar.qdev_prop_uint64_checkmask
qdev_prop_int64 = cvar.qdev_prop_int64
qdev_prop_size = cvar.qdev_prop_size
qdev_prop_string = cvar.qdev_prop_string
qdev_prop_on_off_auto = cvar.qdev_prop_on_off_auto
qdev_prop_size32 = cvar.qdev_prop_size32
qdev_prop_array = cvar.qdev_prop_array
qdev_prop_link = cvar.qdev_prop_link

class DriveInfo_next(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    tqe_next = property(_pyboard.DriveInfo_next_tqe_next_get, _pyboard.DriveInfo_next_tqe_next_set)
    tqe_circ = property(_pyboard.DriveInfo_next_tqe_circ_get, _pyboard.DriveInfo_next_tqe_circ_set)

    def __init__(self):
        _pyboard.DriveInfo_next_swiginit(self, _pyboard.new_DriveInfo_next())
    __swig_destroy__ = _pyboard.delete_DriveInfo_next

# Register DriveInfo_next in _pyboard:
_pyboard.DriveInfo_next_swigregister(DriveInfo_next)

def blockdev_mark_auto_del(blk):
    return _pyboard.blockdev_mark_auto_del(blk)

def blockdev_auto_del(blk):
    return _pyboard.blockdev_auto_del(blk)

def blk_legacy_dinfo(blk):
    return _pyboard.blk_legacy_dinfo(blk)

def blk_set_legacy_dinfo(blk, dinfo):
    return _pyboard.blk_set_legacy_dinfo(blk, dinfo)

def blk_by_legacy_dinfo(dinfo):
    return _pyboard.blk_by_legacy_dinfo(dinfo)

def override_max_devs(type, max_devs):
    return _pyboard.override_max_devs(type, max_devs)

def drive_get(type, bus, unit):
    return _pyboard.drive_get(type, bus, unit)

def drive_check_orphaned():
    return _pyboard.drive_check_orphaned()

def drive_get_by_index(type, index):
    return _pyboard.drive_get_by_index(type, index)

def drive_get_max_bus(type):
    return _pyboard.drive_get_max_bus(type)

def drive_add(type, index, file, optstr):
    return _pyboard.drive_add(type, index, file, optstr)

def drive_new(arg, block_default_type, errp):
    return _pyboard.drive_new(arg, block_default_type, errp)

